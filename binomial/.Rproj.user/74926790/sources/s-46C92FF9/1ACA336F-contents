---
title: "Workout03-Arash-Nassirinia"
author: "Arash Nassirinia"
date: "April 19, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(testthat)
```

```{r}
##Private Checker Functions

# title check_prob
# description determines if prob value is valid
# param prob: probability value
# return True or raises error (if prob is not between 0 and 1)
check_prob<-function (prob) {
  if (prob>=0 & prob<=1) {
    return (T)
  } else {
    stop("invalid prob value")
  }
}

# title check_trials
# description determines if trials value is valid
# param trials: number of trials
# return True or raises error (if trials is not non-negative)
check_trials<-function(trials){
  if (trials>=0){
    return(T)
  } else{
    stop('invalid trials value')
  }
}

# title check_success
# description determines if success value is valid
# param success: number of successes
# param trials: number of trials
# return True or raises error (if success>trials or success<0)
check_success<-function(success, trials){
  if (success >=0 & success<=trials){
    return(T)
  } else if (success<0){
    stop("invalid success value")
  } else{
    stop("success cannot be greater than trials")
  }
}
```

```{r}
##Private Auxilary Functions

# title aux_mean
# description calculates mean
# param success: number of trials
# param trials: probability value
# return mean using trials and probability
aux_mean<-function(trials,prob){
  return(trials*prob)
}

# title aux_variance
# description calculates variance
# param success: number of trials
# param trials: probability value
# return variance using trials and probability
aux_variance<-function(trials,prob){
  return(trials*prob*(1-prob))
}

# title aux_mode
# description calculates mode
# param success: number of trials
# param trials: probability value
# return mode using trials and probability
aux_mode<-function(trials,prob){
  if (trials%%2 !=0) {
  return(c(round(trials*prob+prob),round(trials*prob+prob-1)))
  } else{
    return(round(trials*prob+prob))
  }
}

# title aux_skewness
# description calculates skewness
# param success: number of trials
# param trials: probability value
# return skewness using trials and probability
aux_skewness<-function(trials,prob){
  numerator<-1-2*prob
  denominator<-sqrt(trials*prob*(1-prob))
  return(numerator/denominator)
}

# title aux_kurtosis
# description calculates kurtosis
# param success: number of trials
# param trials: probability value
# return kurtosis using trials and probability
aux_kurtosis<-function(trials,prob){
  numerator<-1-6*prob*(1-prob)
  denominator<-trials*prob*(1-prob)
  return(numerator/denominator)
}
```

```{r}
##Main

#' @title bin_choose
#' @description calculates number of combinations - how many different ways you can choose k items from n items set without repetition and without order
#' @param n: total number of items
#' @param k: number of items to be chosen
#' @return n choose k
#' @export
#' @examples 
bin_choose<-function(n,k){
  if (k>n){
    stop("k cannot be greater than n")
  } else{
    return(factorial(n)/(factorial(k)*factorial(n-k)))
  }
}
```

```{r}
##Main

#' @title bin_probability
#' @description calculates number of combinations after checking if it is a valid calculation
#' @param success: total number of successes
#' @param trials: total number of trials
#' @param prob: probability of success
#' @return binomial probability or raise an error if parameters will not work
#' @export
#' @examples 
bin_probability<-function(success,trials,prob){
  if (check_trials(trials) & check_prob(prob) & check_success(success,trials)){
    return(bin_choose(trials,success)*prob^success*(1-prob)^(trials-success))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  } else if (!check_success(success,trials)){
    stop('invalid success value')
  }
}
```

```{r}
##Main

#' @title bin_distribution
#' @description calculates probability distribution in a table
#' @param trials: total number of trials
#' @param prob: probability of success
#' @return data.frame of success and probability
#' @export
#' @examples
bin_distribution<-function(trials,prob){
  success<-c(0:trials)
  probability<-c()
  for (i in c(0:trials)){
    probability[i+1]<-bin_probability(i,trials,prob)
  }
  return(data.frame(success,probability))
}
```

```{r}
##Method

#' @export
plot.bindis<-function(dat){
  barplot(
    height=dat$probability,
    names.arg = dat$success,
    xlab="successes",
    ylab="probability"
  )
}
```

```{r}
##Main

#' @title bin_cumulative
#' @description adds a column of cumulative probability to the data frame generated by bin_distribution
#' @param trials: total number of trials
#' @param prob: probability of success
#' @return data.frame of success, probability, and cumulative probability
#' @export
#' @examples
bin_cumulative<-function(trials,prob){
  bin_dist<-bin_distribution(trials,prob)
  cum<-c()
  for (i in c(1:length(bin_dist$probability))){
    if (i==1){
      cum[i]<-bin_dist$probability[i]
    } else{
      cum[i]<-cum[i-1]+bin_dist$probability[i]
    }
  }
  bin_dist$cumulative<-cum
  return(bin_dist)
}
```

```{r}
##Method

#' @export
plot.bincum<-function(dat){
  ggplot(data=dat, aes(x=success, y=cumulative)) +
    geom_line() +
    geom_point() +
    theme_light()
  invisible(dat)
}
```

```{r}
##Main

#' @title bin_variable
#' @description extracts trials and probability values after using bin_cumulative
#' @param trials: total number of trials
#' @param prob: probability of success
#' @return list of trials and prob values
#' @export
#' @examples
bin_variable<-function(trials,prob){
  if(check_trials(trials) & check_prob(prob)) {
    bin_cum<-bin_cumulative(trials,prob)
    return(list(trials=bin_cum$success,prob=bin_cum$probability))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  }
}
```

```{r}
##Method

#' @export
print.binvar<-function(object){
  print(object)
  invisible(object)
}

#' @export
summary.binvar<-function(object){
  print(summary(object))
  invisible(object)
}

#' @export
print.summary.binvar<-function(object){
  print(summary.binvar(object))
  invisible(object)
}
```

```{r}
##Main


#' @title bin_mean
#' @description calculates mean
#' @param trials: number of trials
#' @param prob: probability value
#' @return mean using trials and probability
bin_mean<-function(trials,prob){
  if (check_trials(trials) & check_prob(prob)){
      return(aux_mean(trials,prob))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  }
}

#' @title bin_variance
#' @description calculates variance
#' @param success: number of trials
#' @param trials: probability value
#' @return variance using trials and probability
bin_variance<-function(trials,prob){
  if (check_trials(trials) & check_prob(prob)){
      return(aux_variance(trials,prob))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  }
}

#' @title bin_mode
#' @description calculates mode
#' @param success: number of trials
#' @param trials: probability value
#' @return mode using trials and probability
bin_mode<-function(trials,prob){
  if (check_trials(trials) & check_prob(prob)){
      return(aux_mode(trials,prob))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  }
}

#' @title bin_skewness
#' @description calculates skewness
#' @param success: number of trials
#' @param trials: probability value
#' @return skewness using trials and probability
bin_skewness<-function(trials,prob){
  if (check_trials(trials) & check_prob(prob)){
      return(aux_skewness(trials,prob))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  }
}

#' @title bin_kurtosis
#' @description calculates kurtosis
#' @param success: number of trials
#' @param trials: probability value
#' @return kurtosis using trials and probability
bin_kurtosis<-function(trials,prob){
  if (check_trials(trials) & check_prob(prob)){
      return(aux_kurtosis(trials,prob))
  } else if (!check_trials(trials)){
    stop('invalid trials value')
  } else if (!check_prob(prob)){
    stop('invalid prob value')
  }
}
```















